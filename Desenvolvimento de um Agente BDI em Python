Descrição do Cenário e Expansão 

Cenário: O agente BDI gerencia uma casa inteligente, tomando decisões sobre o uso das luzes e controle de temperatura, com base em percepções do ambiente.
Expansão: Os participantes devem pensar em como podem expandir esse cenário. Eles podem incluir sensores adicionais (detecção de presença, por exemplo), variáveis temporais (dia/noite), ou modos de economia de energia.

Implementação Básica do Agente BDI 
Objetivo: Implementar a primeira versão do agente BDI que gerencia luzes em uma casa.

Passo a Passo:
class AgenteBDI:
    def __init__(self):
        # Crenças sobre o ambiente
        self.crencas = {
            'esta_escuro': False,
            'luz_acesa': False,
            'temperatura': 20  # Inicializando com uma temperatura padrão (20°C)
        }
        
        # Desejos: Manter a casa iluminada e confortável
        self.desejos = {
            'casa_iluminada': True,
            'temperatura_confortavel': (18, 24)  # Definindo o intervalo de temperatura desejada
        }
        
        # Intenções: Ações que o agente vai tomar
        self.intencoes = []

    # Atualiza as crenças com informações do ambiente
    def atualizar_crencas(self, esta_escuro, temperatura):
        self.crencas['esta_escuro'] = esta_escuro
        self.crencas['temperatura'] = temperatura
    
    # Deliberar sobre as intenções com base nas crenças e desejos
    def deliberar(self):
        # Verificar iluminação
        if self.crencas['esta_escuro'] and not self.crencas['luz_acesa']:
            self.intencoes.append('acender_luz')
        elif not self.crencas['esta_escuro'] and self.crencas['luz_acesa']:
            self.intencoes.append('apagar_luz')
        
        # Verificar temperatura
        if self.crencas['temperatura'] < self.desejos['temperatura_confortavel'][0]:
            self.intencoes.append('ligar_aquecimento')
        elif self.crencas['temperatura'] > self.desejos['temperatura_confortavel'][1]:
            self.intencoes.append('ligar_resfriamento')

    # Executar as intenções
    def executar_intencoes(self):
        while self.intencoes:
            intencao = self.intencoes.pop(0)
            if intencao == 'acender_luz':
                print("Luz acesa.")
                self.crencas['luz_acesa'] = True
            elif intencao == 'apagar_luz':
                print("Luz apagada.")
                self.crencas['luz_acesa'] = False
            elif intencao == 'ligar_aquecimento':
                print("Aquecimento ligado.")
            elif intencao == 'ligar_resfriamento':
                print("Resfriamento ligado.")

# Simulação
if __name__ == "__main__":
    agente = AgenteBDI()
    
    # Atualizar crenças com base no ambiente (escurecendo e esfriando)
    agente.atualizar_crencas(esta_escuro=True, temperatura=16)
    
    # Deliberar e executar intenções
    agente.deliberar()
    agente.executar_intencoes()
    
    # Simular nova mudança no ambiente (clareando e aquecendo)
    agente.atualizar_crencas(esta_escuro=False, temperatura=26)
    
    # Deliberar e executar intenções novamente
    agente.deliberar()
    agente.executar_intencoes()

Explicação Detalhada do Código
Atualização das Crenças: A função atualizar_crencas() permite que o agente perceba o ambiente e ajuste suas crenças (por exemplo, mudanças de temperatura e luminosidade).
Deliberação das Intenções: Com base nas crenças atualizadas, o agente delibera sobre suas intenções de ação, como acender/apagar luzes ou ajustar a temperatura.
Execução das Intenções: O agente realiza as ações determinadas pelas suas intenções, modificando o estado do ambiente ou agindo sobre ele.


Tarefas Práticas Expandidas 
Desafio 1: Adicionar um sensor de presença ao ambiente e criar novas intenções para ativar/desativar luzes e ar condicionado com base na detecção de pessoas na casa.
Sugestão: Modificar o código para incluir a crença pessoas_presentes e adicionar uma verificação no momento da deliberação, ligando o sistema de aquecimento/resfriamento apenas se houver pessoas na casa.

Desafio 2: Implementar um modo de economia de energia. Quando o agente detecta que está de noite e não há ninguém presente na casa, ele deve desligar todos os sistemas desnecessários.
Sugestão: Adicionar um novo desejo, economia_de_energia, e criar intenções que sejam executadas quando este desejo for priorizado.

Desafio 3: Introduzir um ciclo contínuo de percepção-deliberação-ação. Simule várias rodadas de decisões do agente, adicionando variáveis temporais (como dia/noite alternando) 
e observe como o agente se adapta ao ambiente dinâmico.

import time
if __name__ == "__main__":
    agente = AgenteBDI()

    # Ciclo contínuo de percepção-deliberação-ação
    for _ in range(5):  # Simular 5 iterações
        # Atualização simulada do ambiente (alterna entre dia/noite e temperaturas)
        esta_escuro = not agente.crencas['esta_escuro']
        temperatura = agente.crencas['temperatura'] + (2 if not esta_escuro else -2)
        
        agente.atualizar_crencas(esta_escuro=esta_escuro, temperatura=temperatura)
        
        # Deliberar e executar intenções
        agente.deliberar()
        agente.executar_intencoes()
        
        # Simular intervalo de tempo
        time.sleep(1)


Discussão e Reflexão 
Discussão: Converse sobre os comportamentos observados durante a prática. Os agentes conseguiram agir de forma eficaz no ambiente simulado? O que poderia ser melhorado?

Reflexão: Quais são as limitações de um agente BDI simples como este? Como você pode estender o modelo para cenários mais complexos, como ambientes multiagente ou situações com múltiplos objetivos conflitantes
